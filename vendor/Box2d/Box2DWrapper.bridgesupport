<?xml version='1.0'?>
<signatures version='1.0'>
<struct name='b2ContactFeature' type='{b2ContactFeature=&quot;indexA&quot;C&quot;indexB&quot;C&quot;typeA&quot;C&quot;typeB&quot;C}'>
<field name='indexA' declared_type='uint8' type='C'/>
<field name='indexB' declared_type='uint8' type='C'/>
<field name='typeA' declared_type='uint8' type='C'/>
<field name='typeB' declared_type='uint8' type='C'/>
</struct>
<struct name='b2ContactImpulse' type='{b2ContactImpulse=&quot;normalImpulses&quot;[2f]&quot;tangentImpulses&quot;[2f]&quot;count&quot;i}'>
<field name='normalImpulses' declared_type='float32*' type='[2f]'/>
<field name='tangentImpulses' declared_type='float32*' type='[2f]'/>
<field name='count' declared_type='int32' type='i'/>
</struct>
<struct name='b2ContactRegister' type='{b2ContactRegister=&quot;createFcn&quot;^?&quot;destroyFcn&quot;^?&quot;primary&quot;B}'>
<field name='createFcn' declared_type='b2ContactCreateFcn*' function_pointer='true' type='^?'>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int32' type='i'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int32' type='i'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='int*' type='^i'/>
</field>
<field name='destroyFcn' declared_type='b2ContactDestroyFcn*' function_pointer='true' type='^?'>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='primary' declared_type='_Bool' type='B'/>
</struct>
<struct name='b2Filter' type='{b2Filter=&quot;b2Filter&quot;?&quot;maskBits&quot;S&quot;groupIndex&quot;s}'>
<field name='b2Filter' declared_type='int ()' type='?'/>
<field name='maskBits' declared_type='uint16' type='S'/>
<field name='groupIndex' declared_type='int16' type='s'/>
</struct>
<struct name='b2Mat22' type='{b2Mat22=&quot;b2Mat22&quot;?}'>
<field name='b2Mat22' declared_type='int ()' type='?'/>
</struct>
<struct name='b2Profile' type='{b2Profile=&quot;step&quot;f&quot;collide&quot;f&quot;solve&quot;f&quot;solveInit&quot;f&quot;solveVelocity&quot;f&quot;solvePosition&quot;f&quot;broadphase&quot;f&quot;solveTOI&quot;f}'>
<field name='step' declared_type='float32' type='f'/>
<field name='collide' declared_type='float32' type='f'/>
<field name='solve' declared_type='float32' type='f'/>
<field name='solveInit' declared_type='float32' type='f'/>
<field name='solveVelocity' declared_type='float32' type='f'/>
<field name='solvePosition' declared_type='float32' type='f'/>
<field name='broadphase' declared_type='float32' type='f'/>
<field name='solveTOI' declared_type='float32' type='f'/>
</struct>
<struct name='b2Rot' type='{b2Rot=&quot;b2Rot&quot;?}'>
<field name='b2Rot' declared_type='int ()' type='?'/>
</struct>
<struct name='b2SimplexCache' type='{b2SimplexCache=&quot;metric&quot;f&quot;count&quot;S&quot;indexA&quot;[3C]&quot;indexB&quot;[3C]}'>
<field name='metric' declared_type='float32' type='f'/>
<field name='count' declared_type='uint16' type='S'/>
<field name='indexA' declared_type='uint8*' type='[3C]'/>
<field name='indexB' declared_type='uint8*' type='[3C]'/>
</struct>
<struct name='b2StackEntry' type='{b2StackEntry=&quot;data&quot;*&quot;size&quot;i&quot;usedMalloc&quot;B}'>
<field name='data' declared_type='char*' type='*'/>
<field name='size' declared_type='int32' type='i'/>
<field name='usedMalloc' declared_type='_Bool' type='B'/>
</struct>
<struct name='b2TOIOutput' type='{b2TOIOutput=&quot;state&quot;i&quot;t&quot;f}'>
<field name='state' declared_type='enum State' type='i'/>
<field name='t' declared_type='float32' type='f'/>
</struct>
<struct name='b2TimeStep' type='{b2TimeStep=&quot;dt&quot;f&quot;inv_dt&quot;f&quot;dtRatio&quot;f&quot;velocityIterations&quot;i&quot;positionIterations&quot;i&quot;warmStarting&quot;B}'>
<field name='dt' declared_type='float32' type='f'/>
<field name='inv_dt' declared_type='float32' type='f'/>
<field name='dtRatio' declared_type='float32' type='f'/>
<field name='velocityIterations' declared_type='int32' type='i'/>
<field name='positionIterations' declared_type='int32' type='i'/>
<field name='warmStarting' declared_type='_Bool' type='B'/>
</struct>
<struct name='b2TreeNode' type='{b2TreeNode=&quot;IsLeaf&quot;?&quot;userData&quot;^v&quot;&quot;(?=&quot;parent&quot;i&quot;next&quot;i)&quot;child1&quot;i&quot;child2&quot;i&quot;height&quot;i}'>
<field name='IsLeaf' declared_type='_Bool ()' type='?'/>
<field name='userData' declared_type='void*' type='^v'/>
<field declared_type='union b2TreeNode::' type='(?=&quot;parent&quot;i&quot;next&quot;i)'/>
<field name='child1' declared_type='int32' type='i'/>
<field name='child2' declared_type='int32' type='i'/>
<field name='height' declared_type='int32' type='i'/>
</struct>
<struct name='b2Vec2' type='{b2Vec2=&quot;b2Vec2&quot;?}'>
<field name='b2Vec2' declared_type='int ()' type='?'/>
</struct>
<struct name='b2Vec3' type='{b2Vec3=&quot;b2Vec3&quot;?}'>
<field name='b2Vec3' declared_type='int ()' type='?'/>
</struct>
<struct name='b2Version' type='{b2Version=&quot;major&quot;i&quot;minor&quot;i&quot;revision&quot;i}'>
<field name='major' declared_type='int32' type='i'/>
<field name='minor' declared_type='int32' type='i'/>
<field name='revision' declared_type='int32' type='i'/>
</struct>
<constant name='SCALE' declared_type='int' const='true' type='i'/>
<constant name='b2AABB' declared_type='_Bool' type='B'/>
<constant name='b2BlockAllocator' declared_type='int' type='i'/>
<constant name='b2Body' declared_type='int' type='i'/>
<constant name='b2BroadPhase' declared_type='int' type='i'/>
<constant name='b2ChainAndCircleContact' declared_type='int' type='i'/>
<constant name='b2ChainAndPolygonContact' declared_type='int' type='i'/>
<constant name='b2ChainShape' declared_type='int' type='i'/>
<constant name='b2CircleContact' declared_type='int' type='i'/>
<constant name='b2CircleShape' declared_type='int' type='i'/>
<constant name='b2Contact' declared_type='int' type='i'/>
<constant name='b2ContactFilter' declared_type='int' type='i'/>
<constant name='b2ContactListener' declared_type='int' type='i'/>
<constant name='b2ContactManager' declared_type='int' type='i'/>
<constant name='b2ContactSolver' declared_type='int' type='i'/>
<constant name='b2Controller' declared_type='int' type='i'/>
<constant name='b2DestructionListener' declared_type='int' type='i'/>
<constant name='b2DistanceJoint' declared_type='void' type='v'/>
<constant name='b2DistanceProxy' declared_type='int32' type='i'/>
<constant name='b2Draw' declared_type='int' type='i'/>
<constant name='b2DynamicTree' declared_type='int' type='i'/>
<constant name='b2EdgeAndCircleContact' declared_type='int' type='i'/>
<constant name='b2EdgeAndPolygonContact' declared_type='int' type='i'/>
<constant name='b2EdgeShape' declared_type='int' type='i'/>
<constant name='b2Fixture' declared_type='int' type='i'/>
<constant name='b2FrictionJoint' declared_type='int' type='i'/>
<constant name='b2GearJoint' declared_type='int' type='i'/>
<constant name='b2Island' declared_type='int' type='i'/>
<constant name='b2Joint' declared_type='int' type='i'/>
<constant name='b2MotorJoint' declared_type='int' type='i'/>
<constant name='b2MouseJoint' declared_type='int' type='i'/>
<constant name='b2PolygonAndCircleContact' declared_type='int' type='i'/>
<constant name='b2PolygonContact' declared_type='int' type='i'/>
<constant name='b2PolygonShape' declared_type='int' type='i'/>
<constant name='b2PrismaticJoint' declared_type='int' type='i'/>
<constant name='b2PulleyJoint' declared_type='int' type='i'/>
<constant name='b2QueryCallback' declared_type='int' type='i'/>
<constant name='b2RayCastCallback' declared_type='int' type='i'/>
<constant name='b2RevoluteJoint' declared_type='int' type='i'/>
<constant name='b2Rope' declared_type='int' type='i'/>
<constant name='b2RopeJoint' declared_type='int' type='i'/>
<constant name='b2Shape' declared_type='int' type='i'/>
<constant name='b2StackAllocator' declared_type='int' type='i'/>
<constant name='b2Timer' declared_type='int' type='i'/>
<constant name='b2Vec2_zero' declared_type='struct b2Vec2' const='true' type='{b2Vec2=?}'/>
<constant name='b2WeldJoint' declared_type='int' type='i'/>
<constant name='b2WheelJoint' declared_type='int' type='i'/>
<constant name='b2World' declared_type='int' type='i'/>
<constant name='b2_blockSizes' declared_type='int32' const='true' type='i'/>
<constant name='b2_chunkArrayIncrement' declared_type='int32' const='true' type='i'/>
<constant name='b2_chunkSize' declared_type='int32' const='true' type='i'/>
<constant name='b2_maxBlockSize' declared_type='int32' const='true' type='i'/>
<constant name='b2_maxStackEntries' declared_type='int32' const='true' type='i'/>
<constant name='b2_nullFeature' declared_type='uint8' const='true' type='C'/>
<constant name='b2_stackSize' declared_type='int32' const='true' type='i'/>
<constant name='b2_version' declared_type='struct b2Version' type='{b2Version=iii}'/>
<constant name='operator' declared_type='struct b2Vec2' type='{b2Vec2=?}'/>
<enum name='PTM_RATIO' value='56'/>
<enum name='b2_aabbExtension' value='0.1f'/>
<enum name='b2_aabbMultiplier' value='2.0f'/>
<enum name='b2_addState' value='1'/>
<enum name='b2_angularSleepTolerance' value='0.034906588'/>
<enum name='b2_angularSlop' value='0.034906588'/>
<enum name='b2_baumgarte' value='0.2f'/>
<enum name='b2_dynamicBody' value='2'/>
<enum name='b2_epsilon' value='1.1920929E-7'/>
<enum name='b2_kinematicBody' value='1'/>
<enum name='b2_linearSleepTolerance' value='0.01f'/>
<enum name='b2_linearSlop' value='0.005f'/>
<enum name='b2_maxAngularCorrection' value='0.13962635'/>
<enum name='b2_maxFloat' value='3.4028235E+38'/>
<enum name='b2_maxLinearCorrection' value='0.2f'/>
<enum name='b2_maxManifoldPoints' value='2'/>
<enum name='b2_maxPolygonVertices' value='8'/>
<enum name='b2_maxRotation' value='1.5707964'/>
<enum name='b2_maxRotationSquared' value='2.4674013'/>
<enum name='b2_maxSubSteps' value='8'/>
<enum name='b2_maxTOIContacts' value='32'/>
<enum name='b2_maxTranslation' value='2.0f'/>
<enum name='b2_maxTranslationSquared' value='4'/>
<enum name='b2_nullNode' value='-1'/>
<enum name='b2_nullState' value='0'/>
<enum name='b2_persistState' value='2'/>
<enum name='b2_pi' value='3.14159265359f'/>
<enum name='b2_polygonRadius' value='0.0099999998'/>
<enum name='b2_removeState' value='3'/>
<enum name='b2_staticBody' value='0'/>
<enum name='b2_timeToSleep' value='0.5f'/>
<enum name='b2_toiBaugarte' value='0.75f'/>
<enum name='b2_velocityThreshold' value='1.0f'/>
<enum name='e_atLowerLimit' value='1'/>
<enum name='e_atUpperLimit' value='2'/>
<enum name='e_distanceJoint' value='3'/>
<enum name='e_equalLimits' value='3'/>
<enum name='e_frictionJoint' value='9'/>
<enum name='e_gearJoint' value='6'/>
<enum name='e_inactiveLimit' value='0'/>
<enum name='e_motorJoint' value='11'/>
<enum name='e_mouseJoint' value='5'/>
<enum name='e_prismaticJoint' value='2'/>
<enum name='e_pulleyJoint' value='4'/>
<enum name='e_revoluteJoint' value='1'/>
<enum name='e_ropeJoint' value='10'/>
<enum name='e_unknownJoint' value='0'/>
<enum name='e_weldJoint' value='8'/>
<enum name='e_wheelJoint' value='7'/>
<function name='b2Alloc'>
<arg name='size' declared_type='int32' type='i'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='b2ClipSegmentToLine'>
<arg name='vOut' declared_type='int' type='i'/>
<arg name='vIn' declared_type='int' type='i'/>
<arg declared_type='struct b2Vec2' const='true' type='{b2Vec2=?}'/>
<retval declared_type='int32' type='i'/>
</function>
<function name='b2CollideCircles'>
<arg name='manifold' declared_type='struct b2Manifold*' type='^{b2Manifold=i{b2Vec2=?}{b2Vec2=?}ii}'/>
<arg name='circleA' declared_type='int*' const='true' type='^i'/>
<arg declared_type='struct b2Transform' const='true' type='{b2Transform=?{b2Rot=?}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='b2CollideEdgeAndCircle'>
<arg name='manifold' declared_type='struct b2Manifold*' type='^{b2Manifold=i{b2Vec2=?}{b2Vec2=?}ii}'/>
<arg name='polygonA' declared_type='int*' const='true' type='^i'/>
<arg declared_type='struct b2Transform' const='true' type='{b2Transform=?{b2Rot=?}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='b2CollideEdgeAndPolygon'>
<arg name='manifold' declared_type='struct b2Manifold*' type='^{b2Manifold=i{b2Vec2=?}{b2Vec2=?}ii}'/>
<arg name='edgeA' declared_type='int*' const='true' type='^i'/>
<arg declared_type='struct b2Transform' const='true' type='{b2Transform=?{b2Rot=?}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='b2CollidePolygonAndCircle'>
<arg name='manifold' declared_type='struct b2Manifold*' type='^{b2Manifold=i{b2Vec2=?}{b2Vec2=?}ii}'/>
<arg name='polygonA' declared_type='int*' const='true' type='^i'/>
<arg declared_type='struct b2Transform' const='true' type='{b2Transform=?{b2Rot=?}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='b2CollidePolygons'>
<arg name='manifold' declared_type='struct b2Manifold*' type='^{b2Manifold=i{b2Vec2=?}{b2Vec2=?}ii}'/>
<arg name='polygonA' declared_type='int*' const='true' type='^i'/>
<arg declared_type='struct b2Transform' const='true' type='{b2Transform=?{b2Rot=?}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='b2Cross' inline='true'>
<arg name='s' declared_type='float32' const='true' type='f'/>
<arg declared_type='struct b2Vec2' const='true' type='{b2Vec2=?}'/>
<retval declared_type='struct b2Vec2' type='{b2Vec2=?}'/>
</function>
<function name='b2Distance'>
<arg name='output' declared_type='struct b2DistanceOutput*' type='^{b2DistanceOutput={b2Vec2=?}{b2Vec2=?}fi}'/>
<arg name='cache' declared_type='struct b2SimplexCache*' type='^{b2SimplexCache=fS[3C][3C]}'/>
<arg name='input' declared_type='struct b2DistanceInput*' const='true' type='^{b2DistanceInput={b2DistanceProxy=????{b2Vec2=?}?{b2Vec2=?}[2{b2Vec2=?}]^{b2Vec2}}{b2DistanceProxy=????{b2Vec2=?}?{b2Vec2=?}[2{b2Vec2=?}]^{b2Vec2}}{b2Transform=?{b2Rot=?}}{b2Transform=?{b2Rot=?}}B}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='b2Dot' inline='true'>
<arg declared_type='struct b2Vec2' const='true' type='{b2Vec2=?}'/>
<retval declared_type='float32' type='f'/>
</function>
<function name='b2Free'>
<arg name='mem' declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='b2GetPointStates'>
<arg name='state1' declared_type='enum b2PointState*' type='^i'/>
<arg name='state2' declared_type='enum b2PointState*' type='^i'/>
<arg name='manifold1' declared_type='struct b2Manifold*' const='true' type='^{b2Manifold=i{b2Vec2=?}{b2Vec2=?}ii}'/>
<arg name='manifold2' declared_type='struct b2Manifold*' const='true' type='^{b2Manifold=i{b2Vec2=?}{b2Vec2=?}ii}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='b2InvSqrt' inline='true'>
<arg name='x' declared_type='float32' type='f'/>
<retval declared_type='float32' type='f'/>
</function>
<function name='b2IsValid' inline='true'>
<arg name='x' declared_type='float32' type='f'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='b2Log' variadic='true'>
<arg name='string' declared_type='char*' const='true' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='b2MixFriction' inline='true'>
<arg name='friction1' declared_type='float32' type='f'/>
<arg name='friction2' declared_type='float32' type='f'/>
<retval declared_type='float32' type='f'/>
</function>
<function name='b2MixRestitution' inline='true'>
<arg name='restitution1' declared_type='float32' type='f'/>
<arg name='restitution2' declared_type='float32' type='f'/>
<retval declared_type='float32' type='f'/>
</function>
<function name='b2Mul' inline='true'>
<arg declared_type='struct b2Mat22' const='true' type='{b2Mat22=?}'/>
<retval declared_type='struct b2Vec2' type='{b2Vec2=?}'/>
</function>
<function name='b2MulT' inline='true'>
<arg declared_type='struct b2Mat22' const='true' type='{b2Mat22=?}'/>
<retval declared_type='struct b2Vec2' type='{b2Vec2=?}'/>
</function>
<function name='b2PairLessThan' inline='true'>
<arg declared_type='int' const='true' type='i'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='b2TestOverlap'>
<arg name='shapeA' declared_type='int*' const='true' type='^i'/>
<arg name='indexA' declared_type='int32' type='i'/>
<arg name='shapeB' declared_type='int*' const='true' type='^i'/>
<arg name='indexB' declared_type='int32' type='i'/>
<arg declared_type='struct b2Transform' const='true' type='{b2Transform=?{b2Rot=?}}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='b2TimeOfImpact'>
<arg name='output' declared_type='struct b2TOIOutput*' type='^{b2TOIOutput=if}'/>
<arg name='input' declared_type='int*' const='true' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='b2Vec2'>
<retval declared_type='int' type='i'/>
</function>
<function name='m_vertices'>
<retval declared_type='int' type='i'/>
</function>
<class name='World'>
<method selector='addBox:'>
<arg name='physicalView' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='createBounds'>
<retval declared_type='void' type='v'/>
</method>
<method selector='setWorld:'>
<arg name='world' declared_type='int*' type='^i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setupWorld'>
<retval declared_type='void' type='v'/>
</method>
<method selector='tick'>
<retval declared_type='void' type='v'/>
</method>
<method selector='world'>
<retval declared_type='int*' type='^i'/>
</method>
</class>
</signatures>
