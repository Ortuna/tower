<?xml version='1.0'?>
<signatures version='1.0'>
<struct name='b2ContactFeature' type='{b2ContactFeature=&quot;indexA&quot;C&quot;indexB&quot;C&quot;typeA&quot;C&quot;typeB&quot;C}'>
<field name='indexA' type='C' declared_type='uint8'/>
<field name='indexB' type='C' declared_type='uint8'/>
<field name='typeA' type='C' declared_type='uint8'/>
<field name='typeB' type='C' declared_type='uint8'/>
</struct>
<struct name='b2ContactImpulse' type='{b2ContactImpulse=&quot;normalImpulses&quot;[2f]&quot;tangentImpulses&quot;[2f]&quot;count&quot;i}'>
<field name='normalImpulses' type='[2f]' declared_type='float32*'/>
<field name='tangentImpulses' type='[2f]' declared_type='float32*'/>
<field name='count' type='i' declared_type='int32'/>
</struct>
<struct name='b2ContactRegister' type='{b2ContactRegister=&quot;createFcn&quot;^?&quot;destroyFcn&quot;^?&quot;primary&quot;B}'>
<field name='createFcn' function_pointer='true' type='^?' declared_type='b2ContactCreateFcn*'>
<arg type='^i' declared_type='int*'/>
<arg type='i' declared_type='int32'/>
<arg type='^i' declared_type='int*'/>
<arg type='i' declared_type='int32'/>
<arg type='^i' declared_type='int*'/>
<retval type='^i' declared_type='int*'/>
</field>
<field name='destroyFcn' function_pointer='true' type='^?' declared_type='b2ContactDestroyFcn*'>
<arg type='^i' declared_type='int*'/>
<arg type='^i' declared_type='int*'/>
<retval type='v' declared_type='void'/>
</field>
<field name='primary' type='B' declared_type='_Bool'/>
</struct>
<struct name='b2Filter' type='{b2Filter=&quot;b2Filter&quot;?&quot;maskBits&quot;S&quot;groupIndex&quot;s}'>
<field name='b2Filter' type='?' declared_type='int ()'/>
<field name='maskBits' type='S' declared_type='uint16'/>
<field name='groupIndex' type='s' declared_type='int16'/>
</struct>
<struct name='b2Mat22' type='{b2Mat22=&quot;b2Mat22&quot;?}'>
<field name='b2Mat22' type='?' declared_type='int ()'/>
</struct>
<struct name='b2Profile' type='{b2Profile=&quot;step&quot;f&quot;collide&quot;f&quot;solve&quot;f&quot;solveInit&quot;f&quot;solveVelocity&quot;f&quot;solvePosition&quot;f&quot;broadphase&quot;f&quot;solveTOI&quot;f}'>
<field name='step' type='f' declared_type='float32'/>
<field name='collide' type='f' declared_type='float32'/>
<field name='solve' type='f' declared_type='float32'/>
<field name='solveInit' type='f' declared_type='float32'/>
<field name='solveVelocity' type='f' declared_type='float32'/>
<field name='solvePosition' type='f' declared_type='float32'/>
<field name='broadphase' type='f' declared_type='float32'/>
<field name='solveTOI' type='f' declared_type='float32'/>
</struct>
<struct name='b2Rot' type='{b2Rot=&quot;b2Rot&quot;?}'>
<field name='b2Rot' type='?' declared_type='int ()'/>
</struct>
<struct name='b2SimplexCache' type='{b2SimplexCache=&quot;metric&quot;f&quot;count&quot;S&quot;indexA&quot;[3C]&quot;indexB&quot;[3C]}'>
<field name='metric' type='f' declared_type='float32'/>
<field name='count' type='S' declared_type='uint16'/>
<field name='indexA' type='[3C]' declared_type='uint8*'/>
<field name='indexB' type='[3C]' declared_type='uint8*'/>
</struct>
<struct name='b2StackEntry' type='{b2StackEntry=&quot;data&quot;*&quot;size&quot;i&quot;usedMalloc&quot;B}'>
<field name='data' type='*' declared_type='char*'/>
<field name='size' type='i' declared_type='int32'/>
<field name='usedMalloc' type='B' declared_type='_Bool'/>
</struct>
<struct name='b2TOIOutput' type='{b2TOIOutput=&quot;state&quot;i&quot;t&quot;f}'>
<field name='state' type='i' declared_type='enum State'/>
<field name='t' type='f' declared_type='float32'/>
</struct>
<struct name='b2TimeStep' type='{b2TimeStep=&quot;dt&quot;f&quot;inv_dt&quot;f&quot;dtRatio&quot;f&quot;velocityIterations&quot;i&quot;positionIterations&quot;i&quot;warmStarting&quot;B}'>
<field name='dt' type='f' declared_type='float32'/>
<field name='inv_dt' type='f' declared_type='float32'/>
<field name='dtRatio' type='f' declared_type='float32'/>
<field name='velocityIterations' type='i' declared_type='int32'/>
<field name='positionIterations' type='i' declared_type='int32'/>
<field name='warmStarting' type='B' declared_type='_Bool'/>
</struct>
<struct name='b2TreeNode' type='{b2TreeNode=&quot;IsLeaf&quot;?&quot;userData&quot;^v&quot;&quot;(?=&quot;parent&quot;i&quot;next&quot;i)&quot;child1&quot;i&quot;child2&quot;i&quot;height&quot;i}'>
<field name='IsLeaf' type='?' declared_type='_Bool ()'/>
<field name='userData' type='^v' declared_type='void*'/>
<field type='(?=&quot;parent&quot;i&quot;next&quot;i)' declared_type='union b2TreeNode::'/>
<field name='child1' type='i' declared_type='int32'/>
<field name='child2' type='i' declared_type='int32'/>
<field name='height' type='i' declared_type='int32'/>
</struct>
<struct name='b2Vec2' type='{b2Vec2=&quot;b2Vec2&quot;?}'>
<field name='b2Vec2' type='?' declared_type='int ()'/>
</struct>
<struct name='b2Vec3' type='{b2Vec3=&quot;b2Vec3&quot;?}'>
<field name='b2Vec3' type='?' declared_type='int ()'/>
</struct>
<struct name='b2Version' type='{b2Version=&quot;major&quot;i&quot;minor&quot;i&quot;revision&quot;i}'>
<field name='major' type='i' declared_type='int32'/>
<field name='minor' type='i' declared_type='int32'/>
<field name='revision' type='i' declared_type='int32'/>
</struct>
<constant name='SCALE' const='true' type='i' declared_type='int'/>
<constant name='b2AABB' type='B' declared_type='_Bool'/>
<constant name='b2BlockAllocator' type='i' declared_type='int'/>
<constant name='b2Body' type='i' declared_type='int'/>
<constant name='b2BroadPhase' type='i' declared_type='int'/>
<constant name='b2ChainAndCircleContact' type='i' declared_type='int'/>
<constant name='b2ChainAndPolygonContact' type='i' declared_type='int'/>
<constant name='b2ChainShape' type='i' declared_type='int'/>
<constant name='b2CircleContact' type='i' declared_type='int'/>
<constant name='b2CircleShape' type='i' declared_type='int'/>
<constant name='b2Contact' type='i' declared_type='int'/>
<constant name='b2ContactFilter' type='i' declared_type='int'/>
<constant name='b2ContactListener' type='i' declared_type='int'/>
<constant name='b2ContactManager' type='i' declared_type='int'/>
<constant name='b2ContactSolver' type='i' declared_type='int'/>
<constant name='b2Controller' type='i' declared_type='int'/>
<constant name='b2DestructionListener' type='i' declared_type='int'/>
<constant name='b2DistanceJoint' type='v' declared_type='void'/>
<constant name='b2DistanceProxy' type='i' declared_type='int32'/>
<constant name='b2Draw' type='i' declared_type='int'/>
<constant name='b2DynamicTree' type='i' declared_type='int'/>
<constant name='b2EdgeAndCircleContact' type='i' declared_type='int'/>
<constant name='b2EdgeAndPolygonContact' type='i' declared_type='int'/>
<constant name='b2EdgeShape' type='i' declared_type='int'/>
<constant name='b2Fixture' type='i' declared_type='int'/>
<constant name='b2FrictionJoint' type='i' declared_type='int'/>
<constant name='b2GearJoint' type='i' declared_type='int'/>
<constant name='b2Island' type='i' declared_type='int'/>
<constant name='b2Joint' type='i' declared_type='int'/>
<constant name='b2MotorJoint' type='i' declared_type='int'/>
<constant name='b2MouseJoint' type='i' declared_type='int'/>
<constant name='b2PolygonAndCircleContact' type='i' declared_type='int'/>
<constant name='b2PolygonContact' type='i' declared_type='int'/>
<constant name='b2PolygonShape' type='i' declared_type='int'/>
<constant name='b2PrismaticJoint' type='i' declared_type='int'/>
<constant name='b2PulleyJoint' type='i' declared_type='int'/>
<constant name='b2QueryCallback' type='i' declared_type='int'/>
<constant name='b2RayCastCallback' type='i' declared_type='int'/>
<constant name='b2RevoluteJoint' type='i' declared_type='int'/>
<constant name='b2Rope' type='i' declared_type='int'/>
<constant name='b2RopeJoint' type='i' declared_type='int'/>
<constant name='b2Shape' type='i' declared_type='int'/>
<constant name='b2StackAllocator' type='i' declared_type='int'/>
<constant name='b2Timer' type='i' declared_type='int'/>
<constant name='b2Vec2_zero' const='true' type='{b2Vec2=?}' declared_type='struct b2Vec2'/>
<constant name='b2WeldJoint' type='i' declared_type='int'/>
<constant name='b2WheelJoint' type='i' declared_type='int'/>
<constant name='b2World' type='i' declared_type='int'/>
<constant name='b2_blockSizes' const='true' type='i' declared_type='int32'/>
<constant name='b2_chunkArrayIncrement' const='true' type='i' declared_type='int32'/>
<constant name='b2_chunkSize' const='true' type='i' declared_type='int32'/>
<constant name='b2_maxBlockSize' const='true' type='i' declared_type='int32'/>
<constant name='b2_maxStackEntries' const='true' type='i' declared_type='int32'/>
<constant name='b2_nullFeature' const='true' type='C' declared_type='uint8'/>
<constant name='b2_stackSize' const='true' type='i' declared_type='int32'/>
<constant name='b2_version' type='{b2Version=iii}' declared_type='struct b2Version'/>
<constant name='operator' type='{b2Vec2=?}' declared_type='struct b2Vec2'/>
<enum name='PTM_RATIO' value='16'/>
<enum name='b2_aabbExtension' value='0.1f'/>
<enum name='b2_aabbMultiplier' value='2.0f'/>
<enum name='b2_addState' value='1'/>
<enum name='b2_angularSleepTolerance' value='0.034906588'/>
<enum name='b2_angularSlop' value='0.034906588'/>
<enum name='b2_baumgarte' value='0.2f'/>
<enum name='b2_dynamicBody' value='2'/>
<enum name='b2_kinematicBody' value='1'/>
<enum name='b2_linearSleepTolerance' value='0.01f'/>
<enum name='b2_linearSlop' value='0.005f'/>
<enum name='b2_maxAngularCorrection' value='0.13962635'/>
<enum name='b2_maxLinearCorrection' value='0.2f'/>
<enum name='b2_maxManifoldPoints' value='2'/>
<enum name='b2_maxPolygonVertices' value='8'/>
<enum name='b2_maxRotation' value='1.5707964'/>
<enum name='b2_maxRotationSquared' value='2.4674013'/>
<enum name='b2_maxSubSteps' value='8'/>
<enum name='b2_maxTOIContacts' value='32'/>
<enum name='b2_maxTranslation' value='2.0f'/>
<enum name='b2_maxTranslationSquared' value='4'/>
<enum name='b2_nullNode' value='-1'/>
<enum name='b2_nullState' value='0'/>
<enum name='b2_persistState' value='2'/>
<enum name='b2_pi' value='3.14159265359f'/>
<enum name='b2_polygonRadius' value='0.0099999998'/>
<enum name='b2_removeState' value='3'/>
<enum name='b2_staticBody' value='0'/>
<enum name='b2_timeToSleep' value='0.5f'/>
<enum name='b2_toiBaugarte' value='0.75f'/>
<enum name='b2_velocityThreshold' value='1.0f'/>
<enum name='e_atLowerLimit' value='1'/>
<enum name='e_atUpperLimit' value='2'/>
<enum name='e_distanceJoint' value='3'/>
<enum name='e_equalLimits' value='3'/>
<enum name='e_frictionJoint' value='9'/>
<enum name='e_gearJoint' value='6'/>
<enum name='e_inactiveLimit' value='0'/>
<enum name='e_motorJoint' value='11'/>
<enum name='e_mouseJoint' value='5'/>
<enum name='e_prismaticJoint' value='2'/>
<enum name='e_pulleyJoint' value='4'/>
<enum name='e_revoluteJoint' value='1'/>
<enum name='e_ropeJoint' value='10'/>
<enum name='e_unknownJoint' value='0'/>
<enum name='e_weldJoint' value='8'/>
<enum name='e_wheelJoint' value='7'/>
<function name='b2Alloc'>
<arg name='size' type='i' declared_type='int32'/>
<retval type='^v' declared_type='void*'/>
</function>
<function name='b2ClipSegmentToLine'>
<arg name='vOut' type='i' declared_type='int'/>
<arg name='vIn' type='i' declared_type='int'/>
<arg const='true' type='{b2Vec2=?}' declared_type='struct b2Vec2'/>
<retval type='i' declared_type='int32'/>
</function>
<function name='b2CollideCircles'>
<arg name='manifold' type='^{b2Manifold=i{b2Vec2=?}{b2Vec2=?}ii}' declared_type='struct b2Manifold*'/>
<arg name='circleA' const='true' type='^i' declared_type='int*'/>
<arg const='true' type='{b2Transform=?{b2Rot=?}}' declared_type='struct b2Transform'/>
<retval type='v' declared_type='void'/>
</function>
<function name='b2CollideEdgeAndCircle'>
<arg name='manifold' type='^{b2Manifold=i{b2Vec2=?}{b2Vec2=?}ii}' declared_type='struct b2Manifold*'/>
<arg name='polygonA' const='true' type='^i' declared_type='int*'/>
<arg const='true' type='{b2Transform=?{b2Rot=?}}' declared_type='struct b2Transform'/>
<retval type='v' declared_type='void'/>
</function>
<function name='b2CollideEdgeAndPolygon'>
<arg name='manifold' type='^{b2Manifold=i{b2Vec2=?}{b2Vec2=?}ii}' declared_type='struct b2Manifold*'/>
<arg name='edgeA' const='true' type='^i' declared_type='int*'/>
<arg const='true' type='{b2Transform=?{b2Rot=?}}' declared_type='struct b2Transform'/>
<retval type='v' declared_type='void'/>
</function>
<function name='b2CollidePolygonAndCircle'>
<arg name='manifold' type='^{b2Manifold=i{b2Vec2=?}{b2Vec2=?}ii}' declared_type='struct b2Manifold*'/>
<arg name='polygonA' const='true' type='^i' declared_type='int*'/>
<arg const='true' type='{b2Transform=?{b2Rot=?}}' declared_type='struct b2Transform'/>
<retval type='v' declared_type='void'/>
</function>
<function name='b2CollidePolygons'>
<arg name='manifold' type='^{b2Manifold=i{b2Vec2=?}{b2Vec2=?}ii}' declared_type='struct b2Manifold*'/>
<arg name='polygonA' const='true' type='^i' declared_type='int*'/>
<arg const='true' type='{b2Transform=?{b2Rot=?}}' declared_type='struct b2Transform'/>
<retval type='v' declared_type='void'/>
</function>
<function name='b2Cross' inline='true'>
<arg name='s' const='true' type='f' declared_type='float32'/>
<arg const='true' type='{b2Vec2=?}' declared_type='struct b2Vec2'/>
<retval type='{b2Vec2=?}' declared_type='struct b2Vec2'/>
</function>
<function name='b2Distance'>
<arg name='output' type='^{b2DistanceOutput={b2Vec2=?}{b2Vec2=?}fi}' declared_type='struct b2DistanceOutput*'/>
<arg name='cache' type='^{b2SimplexCache=fS[3C][3C]}' declared_type='struct b2SimplexCache*'/>
<arg name='input' const='true' type='^{b2DistanceInput={b2DistanceProxy=????{b2Vec2=?}?{b2Vec2=?}[2{b2Vec2=?}]^{b2Vec2}}{b2DistanceProxy=????{b2Vec2=?}?{b2Vec2=?}[2{b2Vec2=?}]^{b2Vec2}}{b2Transform=?{b2Rot=?}}{b2Transform=?{b2Rot=?}}B}' declared_type='struct b2DistanceInput*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='b2Dot' inline='true'>
<arg const='true' type='{b2Vec2=?}' declared_type='struct b2Vec2'/>
<retval type='f' declared_type='float32'/>
</function>
<function name='b2Free'>
<arg name='mem' type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='b2GetPointStates'>
<arg name='state1' type='^i' declared_type='enum b2PointState*'/>
<arg name='state2' type='^i' declared_type='enum b2PointState*'/>
<arg name='manifold1' const='true' type='^{b2Manifold=i{b2Vec2=?}{b2Vec2=?}ii}' declared_type='struct b2Manifold*'/>
<arg name='manifold2' const='true' type='^{b2Manifold=i{b2Vec2=?}{b2Vec2=?}ii}' declared_type='struct b2Manifold*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='b2InvSqrt' inline='true'>
<arg name='x' type='f' declared_type='float32'/>
<retval type='f' declared_type='float32'/>
</function>
<function name='b2IsValid' inline='true'>
<arg name='x' type='f' declared_type='float32'/>
<retval type='B' declared_type='_Bool'/>
</function>
<function name='b2Log' variadic='true'>
<arg name='string' const='true' type='*' declared_type='char*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='b2MixFriction' inline='true'>
<arg name='friction1' type='f' declared_type='float32'/>
<arg name='friction2' type='f' declared_type='float32'/>
<retval type='f' declared_type='float32'/>
</function>
<function name='b2MixRestitution' inline='true'>
<arg name='restitution1' type='f' declared_type='float32'/>
<arg name='restitution2' type='f' declared_type='float32'/>
<retval type='f' declared_type='float32'/>
</function>
<function name='b2Mul' inline='true'>
<arg const='true' type='{b2Mat22=?}' declared_type='struct b2Mat22'/>
<retval type='{b2Vec2=?}' declared_type='struct b2Vec2'/>
</function>
<function name='b2MulT' inline='true'>
<arg const='true' type='{b2Mat22=?}' declared_type='struct b2Mat22'/>
<retval type='{b2Vec2=?}' declared_type='struct b2Vec2'/>
</function>
<function name='b2PairLessThan' inline='true'>
<arg const='true' type='i' declared_type='int'/>
<retval type='B' declared_type='_Bool'/>
</function>
<function name='b2TestOverlap'>
<arg name='shapeA' const='true' type='^i' declared_type='int*'/>
<arg name='indexA' type='i' declared_type='int32'/>
<arg name='shapeB' const='true' type='^i' declared_type='int*'/>
<arg name='indexB' type='i' declared_type='int32'/>
<arg const='true' type='{b2Transform=?{b2Rot=?}}' declared_type='struct b2Transform'/>
<retval type='B' declared_type='_Bool'/>
</function>
<function name='b2TimeOfImpact'>
<arg name='output' type='^{b2TOIOutput=if}' declared_type='struct b2TOIOutput*'/>
<arg name='input' const='true' type='^i' declared_type='int*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='b2Vec2'>
<retval type='i' declared_type='int'/>
</function>
<function name='m_vertices'>
<retval type='i' declared_type='int'/>
</function>
<class name='Box'>
<method selector='addBody'>
<retval type='v' declared_type='void'/>
</method>
<method selector='body'>
<retval type='^i' declared_type='int*'/>
</method>
<method selector='destroyBody'>
<retval type='v' declared_type='void'/>
</method>
<method selector='isAwake'>
<retval type='B' declared_type='_Bool'/>
</method>
<method selector='setBody:'>
<arg name='body' index='0' type='^i' declared_type='int*'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setWorld:'>
<arg name='world' index='0' type='^i' declared_type='int*'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setWorldBridge:'>
<arg name='worldBridge' index='0' type='@' declared_type='World*'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='world'>
<retval type='^i' declared_type='int*'/>
</method>
<method selector='worldBridge'>
<retval type='@' declared_type='World*'/>
</method>
</class>
<class name='World'>
<method selector='addBox:'>
<arg name='physicalView' index='0' type='@' declared_type='Box*'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='createBounds'>
<retval type='v' declared_type='void'/>
</method>
<method selector='createEdge:v2:'>
<arg name='v1' index='0' type='@' declared_type='id'/>
<arg name='v2' index='1' type='@' declared_type='id'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setWorld:'>
<arg name='world' index='0' type='^i' declared_type='int*'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setWorldSize:'>
<arg name='worldSize' index='0' type='i' declared_type='int'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setupGravity'>
<retval type='v' declared_type='void'/>
</method>
<method selector='setupWorld:height:'>
<arg name='width' index='0' type='f' declared_type='float'/>
<arg name='height' index='1' type='f' declared_type='float'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='tick'>
<retval type='v' declared_type='void'/>
</method>
<method selector='world'>
<retval type='^i' declared_type='int*'/>
</method>
<method selector='worldSize'>
<retval type='i' declared_type='int'/>
</method>
</class>
</signatures>
